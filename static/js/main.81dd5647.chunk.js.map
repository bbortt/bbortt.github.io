{"version":3,"sources":["components/layout/maybe-active-link.js","container/layout/header/index.js","container/layout/footer/index.js","routes.js","router.js","app.js","serviceWorker.js","index.js"],"names":["MaybeActiveLink","this","props","href","text","className","exact","to","activeClassName","Component","Header","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Footer","style","fontWeight","routes","path","component","Loadable","loader","loading","Router","map","route","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0UA4BeA,G,uLAfD,IAAD,EACgBC,KAAKC,MAAnBC,EADF,EACEA,KAAMC,EADR,EACQA,KAEb,OACI,yBAAKC,UAAU,qBACX,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAIJ,EAAME,UAAU,WAAWG,gBAAgB,UACzDJ,S,GARKK,cC2BfC,G,uLA3BP,OACI,yBAAKL,UAAU,UACX,yBAAKA,UAAU,iDACX,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,IAAIF,UAAU,yBAC5B,uCAGJ,4BAAQA,UAAU,iBAAiBM,KAAK,SAASC,cAAY,WACrDC,cAAY,uBACZC,gBAAc,sBAAsBC,gBAAc,QAAQC,aAAW,qBACzE,0BAAMX,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2BY,GAAG,uBACzC,wBAAIZ,UAAU,mCACV,kBAAC,EAAD,CAAiBF,KAAK,IAAIC,KAAK,SAC/B,kBAAC,EAAD,CAAiBD,KAAK,YAAYC,KAAK,aACvC,kBAAC,EAAD,CAAiBD,KAAK,UAAUC,KAAK,WACrC,kBAAC,EAAD,CAAiBD,KAAK,OAAOC,KAAK,gB,GApBzCK,cCQNS,E,iLAXP,OACI,4BAAQb,UAAU,uDACd,yBAAKA,UAAU,sBAAf,aACc,uBAAGF,KAAK,6BAA4B,0BAAME,UAAU,eAAhB,UAAqC,0BACnFc,MAAO,CAACC,WAAY,WAD+D,iB,GALlFX,a,yBCoBRY,EAAS,CAClB,CACIC,KAAM,IACNhB,OAAO,EACPiB,UAxBUC,IAAS,CACvBC,OAAQ,kBAAM,8BACdC,QAAS,kBAAM,+CAwBf,CACIJ,KAAM,YACNC,UAvBcC,IAAS,CAC3BC,OAAQ,kBAAM,8BACdC,QAAS,kBAAM,+CAuBf,CACIJ,KAAM,UACNC,UAtBYC,IAAS,CACzBC,OAAQ,kBAAM,8BACdC,QAAS,kBAAM,+CAsBf,CACIJ,KAAM,OACNC,UArBSC,IAAS,CACtBC,OAAQ,kBAAM,8BACdC,QAAS,kBAAM,gDCFJC,E,iLAVP,OACI,yBAAKtB,UAAU,UAEPgB,EAAOO,KAAI,SAACC,EAAOC,GAAR,OAAc,kBAAC,IAAD,eAAOC,IAAG,gBAAWD,IAASD,Y,GALtDpB,aCuBNuB,G,uLAhBP,OACI,yBAAK3B,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,EAAD,MAEA,yBAAKA,UAAU,aACX,kBAAC,EAAD,OAGJ,kBAAC,EAAD,Y,GAXFI,c,kBCDEwB,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCNRC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDqHxC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,kB","file":"static/js/main.81dd5647.chunk.js","sourcesContent":["// @flow\r\nimport React, {Component} from 'react';\r\n\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nimport './maybe-active-link.scss';\r\n\r\ntype Props = {\r\n    href: string,\r\n    text: string\r\n};\r\n\r\nclass MaybeActiveLink extends Component<Props> {\r\n    render() {\r\n        const {href, text} = this.props;\r\n\r\n        return (\r\n            <div className='maybe-active-link'>\r\n                <li className='nav-item'>\r\n                    <NavLink exact to={href} className='nav-link' activeClassName='active'>\r\n                        {text}\r\n                    </NavLink>\r\n                </li>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MaybeActiveLink;\r\n","// @flow\r\nimport React, {Component} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nimport MaybeActiveLink from '../../../components/layout/maybe-active-link';\r\n\r\nimport './header.scss';\r\n\r\ntype Props = { /* ... */ };\r\n\r\nclass Header extends Component<Props> {\r\n    render() {\r\n        return (\r\n            <div className='header'>\r\n                <nav className='navbar navbar-expand-lg navbar-light bg-light'>\r\n                    <NavLink exact to='/' className='nav-link navbar-brand'>\r\n                        <h1>bbortt</h1>\r\n                    </NavLink>\r\n\r\n                    <button className='navbar-toggler' type='button' data-toggle='collapse'\r\n                            data-target='#navbarTogglerDemo02'\r\n                            aria-controls='navbarTogglerDemo02' aria-expanded='false' aria-label='Toggle navigation'>\r\n                        <span className='navbar-toggler-icon'></span>\r\n                    </button>\r\n\r\n                    <div className='collapse navbar-collapse' id='navbarTogglerDemo02'>\r\n                        <ul className='navbar-nav mr-auto mt-2 mt-lg-0'>\r\n                            <MaybeActiveLink href='/' text='Home'/>\r\n                            <MaybeActiveLink href='/projects' text='Projects'/>\r\n                            <MaybeActiveLink href='/social' text='Social'/>\r\n                            <MaybeActiveLink href='/pgp' text='PGP'/>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","// @flow\r\nimport React, {Component} from 'react';\r\n\r\ntype Props = { /* ... */ };\r\n\r\nclass Footer extends Component<Props> {\r\n    render() {\r\n        return (\r\n            <footer className='footer navbar navbar-dark bg-dark mt-5 fixed-bottom'>\r\n                <div className='m-auto navbar-text'>\r\n                    Hosted on <a href='https://pages.github.com/'><span className='text-github'>GitHub <span\r\n                    style={{fontWeight: 'normal'}}>Pages</span></span></a>\r\n                </div>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","// @flow\r\nimport React from 'react';\r\n\r\nimport Loadable from 'react-loadable';\r\n\r\nconst AsyncHome = Loadable({\r\n    loader: () => import ('./container/home'),\r\n    loading: () => <div>Loading...</div>\r\n});\r\n\r\nconst AsyncProjects = Loadable({\r\n    loader: () => import ('./container/projects'),\r\n    loading: () => <div>Loading...</div>\r\n});\r\n\r\nconst AsyncSocial = Loadable({\r\n    loader: () => import ('./container/social'),\r\n    loading: () => <div>Loading...</div>\r\n});\r\n\r\nconst AsyncPGP = Loadable({\r\n    loader: () => import ('./container/key-list'),\r\n    loading: () => <div>Loading...</div>\r\n});\r\n\r\nexport const routes = [\r\n    {\r\n        path: '/',\r\n        exact: true,\r\n        component: AsyncHome\r\n    },\r\n    {\r\n        path: '/projects',\r\n        component: AsyncProjects\r\n    },\r\n    {\r\n        path: '/social',\r\n        component: AsyncSocial\r\n    },\r\n    {\r\n        path: '/pgp',\r\n        component: AsyncPGP\r\n    }\r\n];\r\n","// @flow\r\nimport React, {Component} from 'react';\r\n\r\nimport {Route} from 'react-router-dom';\r\nimport {routes} from './routes';\r\n\r\ntype Props = { /* ... */ };\r\n\r\nclass Router extends Component<Props> {\r\n    render() {\r\n        return (\r\n            <div className='router'>\r\n                {\r\n                    routes.map((route, i) => <Route key={`route-${i}`} {...route} />)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Router;\r\n","// @flow\r\nimport React, {Component} from 'react';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nimport Header from './container/layout/header';\r\nimport Footer from './container/layout/footer';\r\n\r\nimport Router from './router';\r\n\r\nimport './app.scss';\r\n\r\ntype Props = { /* ... */ };\r\n\r\nclass App extends Component<Props> {\r\n    render() {\r\n        return (\r\n            <div className='app'>\r\n                <HashRouter>\r\n                    <Header/>\r\n\r\n                    <div className='container'>\r\n                        <Router/>\r\n                    </div>\r\n\r\n                    <Footer/>\r\n                </HashRouter>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // 'Content is cached for offline use.' message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app';\r\n\r\nimport './index.scss';\r\n\r\nimport 'jquery/dist/jquery.min';\r\nimport 'bootstrap/dist/js/bootstrap.min';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}