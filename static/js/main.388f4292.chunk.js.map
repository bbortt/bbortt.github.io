{"version":3,"sources":["keys/timon_borter.asc","view/Home.js","routes.js","view/KeyList/KeyList.js","Router.js","view/layout/Header/Header.js","view/layout/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","className","Component","routes","exact","path","component","href","key","Router","BrowserRouter","map","route","i","Route","Object","assign","concat","Header","Footer","App","layout_Header_Header","src_Router","layout_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2UCiBzBC,0LARX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,qCAJWE,sBCJNC,SAAS,CACpB,CACEC,OAAO,EACPC,KAAM,IACNC,UAAWT,GAEb,CACEQ,KAAM,QACNC,2LCAA,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,KAAGO,KAAMC,GAAT,gBACAV,EAAAC,EAAAC,cAAA,WAFF,yEAHgBE,gBCYPO,mLAZX,OACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEXE,EAAOQ,IAAI,SAACC,EAAOC,GAAR,OAAcf,EAAAC,EAAAC,cAACc,EAAA,EAADC,OAAAC,OAAA,CAAOR,IAAG,SAAAS,OAAWJ,IAASD,eAN9CV,aCSNgB,0LAPX,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAHAC,cCSNiB,0LAPX,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAHAC,cCqBNkB,0LAdX,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqB,EAAD,MAEAvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACsB,EAAD,OAGFxB,EAAAC,EAAAC,cAACuB,EAAD,cAVUrB,0BCAEsB,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRJC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAAQC,SAASC,eAAe,SDuH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.388f4292.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/timon_borter.eef03043.asc\";","// @flow\nimport React, {Component} from 'react';\n\nimport './Home.scss';\n\ntype Props = { /* ... */ };\n\nclass Home extends Component<Props> {\n  render() {\n    return (\n      <div className='Home'>\n        <h1>About being me.</h1>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import Home from './view/Home';\r\nimport KeyList from './view/KeyList/KeyList';\r\n\r\nexport const routes = [\r\n  {\r\n    exact: true,\r\n    path: \"/\",\r\n    component: Home\r\n  },\r\n  {\r\n    path: \"/keys\",\r\n    component: KeyList\r\n  }\r\n];\r\n","// @flow\r\nimport React, {Component} from 'react';\r\n\r\nimport * as key from '../../keys/timon_borter.asc';\r\n\r\nimport './KeyList.scss';\r\n\r\ntype Props = { /* ... */ };\r\n\r\nclass KeyList extends Component<Props> {\r\n  render() {\r\n    return (\r\n      <div className='KeyList'>\r\n        <a href={key}>Download Key</a>\r\n        <br/>\r\n        Fingerprint: AD1C 31DD 0E4E CA51 8621 1131 5571 6D6C 12B6 6B41\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KeyList;\r\n","import React, {Component} from 'react';\r\n\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport {routes} from './routes';\r\n\r\ntype Props = { /* ... */ };\r\n\r\nclass Router extends Component<Props> {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div className='Router'>\r\n          {\r\n            routes.map((route, i) => <Route key={`route-${i}`} {...route} />)\r\n          }\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Router;\r\n","// @flow\r\nimport React, {Component} from 'react';\r\n\r\nimport './Header.scss';\r\n\r\ntype Props = { /* ... */ };\r\n\r\nclass Header extends Component<Props> {\r\n  render() {\r\n    return (\r\n      <div className='Header'>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","// @flow\r\nimport React, {Component} from 'react';\r\n\r\nimport './Footer.scss';\r\n\r\ntype Props = { /* ... */ };\r\n\r\nclass Footer extends Component<Props> {\r\n  render() {\r\n    return (\r\n      <div className='Footer'>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","// @flow\nimport React, {Component} from 'react';\n\nimport Router from './Router';\n\nimport Header from './view/layout/Header/Header';\nimport Footer from './view/layout/Footer/Footer';\n\nimport './App.scss';\n\ntype Props = { /* ... */ };\n\nclass App extends Component<Props> {\n  render() {\n    return (\n      <div className='App'>\n        <Header/>\n\n        <div className='container'>\n          <Router/>\n        </div>\n\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport './index.scss';\nimport 'bootstrap/dist/js/bootstrap.min';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}